// src/controllers/configuracoesCalendarioController.ts

import { Request, Response } from 'express';
import pool from '../config/db';
import { RowDataPacket, ResultSetHeader } from 'mysql2';

// Interface para a tabela `configuracoes_calendario`
interface ConfiguracoesCalendario extends RowDataPacket {
  id: number;
  ano_letivo: number;
  fuso_horario: string;
  primeiro_dia_semana: string;
  feriados_personalizados: string | null;
}

/**
 * @description Obt√©m as configura√ß√µes do calend√°rio para o ano letivo atual.
 * Se n√£o existirem, cria um registo padr√£o e retorna-o.
 */
export const getCalendarConfig = async (req: Request, res: Response) => {
  const anoLetivo = new Date().getFullYear();
  console.log(`‚úÖ [GET /api/configuracoes/calendario] Buscando configura√ß√µes gerais para o ano ${anoLetivo}`);

  try {
    const [rows] = await pool.query<ConfiguracoesCalendario[]>(
      'SELECT * FROM configuracoes_calendario WHERE ano_letivo = ?',
      [anoLetivo]
    );

    if (rows.length > 0) {
      console.log('üîç [GET /api/configuracoes/calendario] Configura√ß√£o encontrada.');
      return res.json(rows[0]);
    } else {
      console.log('‚ú® [GET /api/configuracoes/calendario] Nenhuma configura√ß√£o encontrada. Criando uma padr√£o.');
      const [insertResult] = await pool.query<ResultSetHeader>(
        'INSERT INTO configuracoes_calendario (ano_letivo) VALUES (?)',
        [anoLetivo]
      );
      const [newRows] = await pool.query<ConfiguracoesCalendario[]>(
        'SELECT * FROM configuracoes_calendario WHERE id = ?',
        [insertResult.insertId]
      );
      return res.status(200).json(newRows[0]);
    }
  } catch (error) {
    console.error("üö® [GET /api/configuracoes/calendario] Erro ao buscar ou criar configura√ß√£o:", error);
    res.status(500).json({ error: 'Erro interno ao buscar configura√ß√µes.' });
  }
};

/**
 * @description Atualiza APENAS as configura√ß√µes gerais do calend√°rio (fuso hor√°rio, feriados, etc.).
 * A gest√£o dos per√≠odos letivos foi movida para periodosLetivosController.
 */
export const updateCalendarConfig = async (req: Request, res: Response) => {
  const anoLetivo = new Date().getFullYear();
  const { fusoHorario, primeiroDia, feriados } = req.body;
  
  console.log(`‚úÖ [PUT /api/configuracoes/calendario] Atualizando configura√ß√µes gerais para o ano ${anoLetivo}`);
  console.log('üëâ Dados recebidos:', JSON.stringify(req.body, null, 2));

  if (!fusoHorario || !primeiroDia) {
    return res.status(400).json({ error: 'Fuso hor√°rio e primeiro dia s√£o obrigat√≥rios.' });
  }

  try {
    const [updateResult] = await pool.query<ResultSetHeader>(
      `UPDATE configuracoes_calendario SET fuso_horario = ?, primeiro_dia_semana = ?, feriados_personalizados = ? WHERE ano_letivo = ?`,
      [fusoHorario, primeiroDia, feriados || null, anoLetivo]
    );

    if (updateResult.affectedRows === 0) {
        // Isso pode acontecer se a configura√ß√£o para o ano ainda n√£o existir.
        // Uma abordagem mais robusta seria criar se n√£o existir.
        console.log('‚ö†Ô∏è [PUT /api/configuracoes/calendario] Nenhuma linha foi atualizada. A configura√ß√£o para o ano pode n√£o existir.');
        // Vamos tentar inserir como fallback.
        await pool.query(
            `INSERT INTO configuracoes_calendario (ano_letivo, fuso_horario, primeiro_dia_semana, feriados_personalizados) VALUES (?, ?, ?, ?)`,
            [anoLetivo, fusoHorario, primeiroDia, feriados || null]
        );
        console.log('‚ú® [PUT /api/configuracoes/calendario] Configura√ß√£o inserida como fallback.');
    } else {
        console.log('‚úîÔ∏è [PUT /api/configuracoes/calendario] Configura√ß√µes gerais atualizadas com sucesso.');
    }

    res.status(200).json({ message: 'Configura√ß√µes gerais do calend√°rio atualizadas!' });

  } catch (error) {
    console.error("üö® [PUT /api/configuracoes/calendario] Erro ao atualizar configs:", error);
    res.status(500).json({ error: 'Erro ao salvar configura√ß√µes gerais.' });
  }
};
